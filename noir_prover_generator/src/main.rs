use actix_web::{web, App, HttpServer, HttpResponse, Responder};
use serde::{Serialize, Deserialize, json};
use serde_json::json;
use std::process::{Command, Output, Stdio};
use std::fs;


#[derive(Debug, Deserialize)]
struct GenerateProofInputs {
    ask: String,
    private_inputs: Vec<String>,
    ask_id: Vec<String>,
}

#[derive(Debug, Serialize)]
struct JsonResponse<T> {
    message: String,
    data: T,
}


async fn generate_proof(inputs: web::Json<GenerateProofInputs>) -> impl Responder {
    // Generate proof using external command `nargo prove`
    let result = execute_prove_command(&inputs).await;

    match result {
        Ok(file_path) => {
            // Read the output file generated by `nargo prove`
            match read_output_file(&file_path) {
                Ok(file_contents) => {
                    // Construct JSON response
                    HttpResponse::Ok().json(JsonResponse {
                        message: "Proof generated successfully.".to_string(),
                        data: Some(file_contents),
                    })
                },
                Err(err) => {
                    HttpResponse::InternalServerError().json(JsonResponse {
                        message: format!("Failed to read output file: {:?}", err),
                        data: None,
                    })
                }
            }
        },
        Err(err) => {
            HttpResponse::InternalServerError().json(JsonResponse {
                message: format!("Failed to generate proof: {:?}", err),
                data: None,
            })
        }
    }
}

async fn execute_prove_command(inputs: &GenerateProofInputs) -> Result<String, std::io::Error> {
    // Construct the command to execute `nargo prove`
    let output_file_path = format!("{}.output.txt", inputs.ask_id[0]); // Assuming ask_id is a single item list
    let mut cmd = Command::new("nargo");
    cmd.arg("prove")
        .arg("-p")
        .arg(format!("{}.toml", &inputs.ask_id[0])) // Assuming ask_id is a single item list
        .stdout(Stdio::piped())
        .stderr(Stdio::piped());

    // Execute the command asynchronously
    let output = cmd.output()?;
    
    // Write the stdout to a file
    fs::write(&output_file_path, &output.stdout)?;

    Ok(output_file_path)
}

fn read_output_file(file_path: &str) -> Result<String, std::io::Error> {
    // Read and return contents of the output file
    fs::read_to_string(file_path)
}

async fn test() -> impl Responder {
    // Implement your logic to generate the proof here
    // For demonstration purposes, we'll just return a JSON response
    let response_json = json!({
        "message": "Not implemented."
    });

    // Respond with JSON
    actix_web::HttpResponse::Ok().json(response_json)
}

async fn benchmark() -> impl Responder {
    // Implement your logic to generate the proof here
    // For demonstration purposes, we'll just return a JSON response
    let response_json = json!({
        "message": "Not implemented."
    });

    // Respond with JSON
    actix_web::HttpResponse::Ok().json(response_json)
}

#[actix_web::main]
async fn main() -> std::io::Result<()> {
    HttpServer::new(|| {
        App::new()
            .route("/api/generateProof", web::post().to(generate_proof))
            .route("/api/test", web::get().to(generate_proof))
            .route("/api/benchmark", web::get().to(generate_proof))
    })
    .bind("127.0.0.1:8080")?
    .run()
    .await
}

